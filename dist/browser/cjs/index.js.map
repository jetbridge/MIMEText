{"version":3,"file":"index.js","sources":["../../../src/MIMETextError.js","../../../src/MIMEMessageHeader.js","../../../src/MIMEMessageContent.js","../../../src/Mailbox.js","../../../src/MIMEMessage.js","../../../src/entrypoints/browser.js"],"sourcesContent":["export default class MIMETextError extends Error {\n  constructor(message, description) {\n    super(message)\n    this.description = description ? description.trim().replace(/[\\s]{2,}/, ' ') : null\n    this.name = 'MIMETextError'\n  }\n}\n","import MIMETextError from './MIMETextError.js'\n\n/*\n* Headers are based on: https://www.rfc-editor.org/rfc/rfc4021#section-2.1\n* (Some are ignored as they can be added later or as a custom header.)\n*/\n\nexport default class MIMEMessageHeader {\n  constructor(placement) {\n    this.maxLineLength = 998\n    this.placement = placement\n    this.store = [\n      {\n        placement: 'header',\n        name: 'Date',\n        // value property is what user sets for this header\n        value: null,\n        // the generator function generates a value for this header unless\n        // user specified a value or user disabled this property\n        generator: () => (new Date().toGMTString()).replace(/GMT|UTC/gi, '+0000'),\n        disabled: false,\n        dump: (v) => {\n          return v\n        }\n      },\n      {\n        placement: 'header',\n        name: 'From',\n        required: true,\n        dump: (v, ctx) => !v.name ? v.dump() : `=?utf-8?B?${ctx.toBase64(v.name)}?= <${v.addr}>`\n      },\n      {\n        placement: 'header',\n        name: 'Sender',\n        dump: (v, ctx) => !v.name ? v.dump() : `=?utf-8?B?${ctx.toBase64(v.name)}?= <${v.addr}>`\n      },\n      {\n        placement: 'header',\n        name: 'Reply-To',\n        dump: (v) => {\n          return v\n        }\n      },\n      {\n        placement: 'header',\n        name: 'To',\n        // INFO: \"To\" field is not required according to the RFC-2822\n        //required: true,\n        dump: (arr, ctx) => arr.map(v => !v.name ? v.dump() : `=?utf-8?B?${ctx.toBase64(v.name)}?= <${v.addr}>`).join(\",\\n \")\n      },\n      {\n        placement: 'header',\n        name: 'Cc',\n        dump: (arr, ctx) => arr.map(v => !v.name ? v.dump() : `=?utf-8?B?${ctx.toBase64(v.name)}?= <${v.addr}>`).join(\",\\n \")\n      },\n      {\n        placement: 'header',\n        name: 'Bcc',\n        dump: (arr, ctx) => arr.map(v => !v.name ? v.dump() : `=?utf-8?B?${ctx.toBase64(v.name)}?= <${v.addr}>`).join(\",\\n \")\n      },\n      {\n        placement: 'header',\n        name: 'Message-ID',\n        disabled: false,\n        generator: (ctx) => {\n          const datestr = Date.now().toString()\n          const randomstr = Math.random().toString(36).slice(2)\n          const domain = ctx.store.filter(item => item.name == 'From')[0].value.getAddrDomain()\n          return '<' + randomstr + '-' + datestr + '@' + domain + '>'\n        },\n        dump: (v) => {\n          return v\n        }\n      },\n      {\n        placement: 'header',\n        name: 'Subject',\n        required: true,\n        dump: (v, ctx) => '=?utf-8?B?' + ctx.toBase64(v) + '?='\n      },\n      {\n        placement: 'header',\n        name: 'MIME-Version',\n        generator: () => '1.0',\n        dump: (v) => {\n          return v\n        }\n      },\n      {\n        placement: 'content',\n        name: 'Content-ID',\n        dump: (v) => {\n          return v\n        }\n      },\n      {\n        placement: 'content',\n        name: 'Content-Type',\n        dump: (v) => {\n          return v\n        }\n      },\n      {\n        placement: 'content',\n        name: 'Content-Transfer-Encoding',\n        dump: (v) => {\n          return v\n        }\n      },\n      {\n        placement: 'content',\n        name: 'Content-Disposition',\n        dump: (v) => {\n          return v\n        }\n      }\n    ]\n  }\n\n  set(name, value) {\n    for (const item of this.store) {\n      if (item.name.toLowerCase() == name.toLowerCase()) {\n        item.value = value\n        return item\n      }\n    }\n\n    const newHeader = {\n      custom: true,\n      placement: this.placement,\n      name: name,\n      value: value,\n      dump: (v) => {\n        return v\n      }\n    }\n\n    this.store.push(newHeader)\n\n    return newHeader\n  }\n\n  get(name) {\n    for (const item of this.store) {\n      if (item.name.toLowerCase() == name.toLowerCase()) {\n        return item.value\n      }\n    }\n    return undefined\n  }\n\n  toObject() {\n    return this.store.reduce((memo, item) => {\n      memo[item.name] = item.value\n      return memo\n    }, {})\n  }\n\n  dump(envctx) {\n    const ctx = {\n      toBase64: envctx.toBase64,\n      store: this.store\n    }\n\n    let lines = ''\n    for (const item of this.store) {\n      if (item.placement != this.placement) continue;\n\n      const isDefined = typeof item.value !== 'undefined' && typeof item.value !== 'null'\n\n      const v = isDefined\n        ? item.value\n        : !item.disabled && typeof item.generator == 'function'\n          ? item.generator(ctx)\n          : null\n\n\n      if (!isDefined && item.required) {\n        throw new MIMETextError('MISSING_HEADER', `The \"${item.name}\" header is required.`)\n      }\n\n      if (!isDefined) continue;\n\n      lines += `${item.name}: ${item.dump(v, ctx)}\\r\\n`\n    }\n\n    return lines.slice(0, -2)\n  }\n}\n","import MIMEMessageHeader from './MIMEMessageHeader.js'\n\nexport default class MIMEMessageContent {\n  constructor(data) {\n    this.maxLineLen = 78\n    this.data = data\n    this.headers = new MIMEMessageHeader('content')\n  }\n\n  setHeader() {\n    this.headers.set(arguments[0], arguments[1])\n    return this\n  }\n\n  setHeaders(obj) {\n    Object.keys(obj).map(prop => this.setHeader(prop, obj[prop]))\n    return this\n  }\n\n  getHeaders() {\n    return this.headers.toObject()\n  }\n\n  getHeader(name) {\n    return this.headers.get(name)\n  }\n\n  isAttachment() {\n    const d = this.headers.get('Content-Disposition')\n    return d && d.indexOf('attachment') !== -1 ? true : false;\n  }\n\n  dump(envctx, boundaries) {\n    const headerBlock = this.headers.dump(envctx)\n\n    if (this.isAttachment()) {\n      return `--${boundaries.mixed}\n${headerBlock}\n\n${this.data}\n`\n    }\n    else {\n      return `${headerBlock}\\r\\n\\r\\n${this.data}`\n    }\n  }\n}\n","import MIMETextError from './MIMETextError.js'\n\nexport default class Mailbox {\n  constructor(input, opts={type: 'to'}) {\n    this.reSpecCompliantAddr = /(([^<>\\n\\r]+)\\s)?<[^\\n\\r]+>/\n\n    this.name = null\n    this.addr = null\n    this.type = opts.type || 'to'\n    this.input = input\n    this.inputType = this.findInputType(input)\n\n    this.createMailbox()\n  }\n\n  findInputType(input) {\n    if (Object.prototype.toString.call(input) === '[object Object]') {\n      if (!input.addr) {\n        throw new MIMETextError('INVALID_MAILBOX', `\n          The input should have an \"addr\" property that specifies the email address \\\n          of the recipient.\n        `)\n      }\n      return 'OBJECT'\n    }\n    else if (this.reSpecCompliantAddr.test(input)) {\n      return 'SPEC_COMPLIANT_TEXT'\n    }\n    else if (typeof input == 'string') {\n      return 'TEXT'\n    }\n    else {\n      throw new MIMETextError('INVALID_MAILBOX')\n    }\n  }\n\n  parseSpecCompliantText(text) {\n    text = text.trim()\n\n    if (text.slice(0, 1) == '<' && text.slice(-1) == '>') {\n      return {addr: text.slice(1, -1)}\n    }\n\n    const arr = text.split(' <')\n    arr[0] = /^(\"|')/.test(arr[0]) ? arr[0].slice(1) : arr[0]\n    arr[0] = /(\"|')$/.test(arr[0]) ? arr[0].slice(0, -1) : arr[0]\n    arr[1] = arr[1].slice(0, -1)\n\n    return {name: arr[0], addr: arr[1]}\n  }\n\n  createMailbox() {\n    switch (this.inputType) {\n      case 'OBJECT':\n        this.addr = this.input.addr\n        this.name = this.input.name || null\n        this.type = this.input.type || this.type\n        break;\n\n      case 'SPEC_COMPLIANT_TEXT':\n        const obj = this.parseSpecCompliantText(this.input)\n        this.addr = obj.addr\n        this.name = obj.name || null\n        break;\n\n      case 'TEXT':\n        this.addr = this.input\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  getAddrDomain() {\n    if (!this.addr) {\n      return ''\n    }\n\n    return this.addr.split('@')[1]\n  }\n\n  dump() {\n    let result = `<${this.addr}>`\n\n    if (this.name) {\n      result = `\"${this.name}\" ${result}`\n    }\n\n    return result\n  }\n\n  toObject() {\n    return {\n      name: this.name,\n      addr: this.addr,\n      type: this.type\n    }\n  }\n}\n","import MIMEMessageHeader from './MIMEMessageHeader.js'\nimport MIMEMessageContent from './MIMEMessageContent.js'\nimport MIMETextError from './MIMETextError.js'\nimport Mailbox from './Mailbox.js'\n\nexport default class MIMEMessage {\n  constructor(envctx) {\n    this.envctx = envctx\n    this.headers = new MIMEMessageHeader('header')\n    this.messages = []\n\n    this.generateBoundaries()\n  }\n\n  generateBoundaries() {\n    this.boundaries = {\n      mixed: Math.random().toString(36).slice(2),\n      alt: Math.random().toString(36).slice(2)\n    }\n  }\n\n  setSender(input) {\n    const mailbox = new Mailbox(input, {type: 'from'})\n\n    this.setHeader('From', mailbox)\n\n    return mailbox\n  }\n\n  getSender() {\n    return this.getHeader('From')\n  }\n\n  setRecipients(input, opts={type: 'to'}) {\n    const recs = []\n\n    if (Array.isArray(input)) {\n      input.map(input => recs.push( new Mailbox(input, opts) ))\n    }\n    else {\n      recs.push( new Mailbox(input, opts) )\n    }\n\n    this.setHeader(opts.type, recs)\n\n    return recs\n  }\n\n  getRecipients(opts={type: 'to'}) {\n    return this.getHeader(opts.type) || []\n  }\n\n  setRecipient(input) {\n    return this.setRecipients(input, {type: 'to'})\n  }\n\n  setTo(input) {\n    return this.setRecipients(input, {type: 'to'})\n  }\n\n  setCc(input) {\n    return this.setRecipients(input, {type: 'cc'})\n  }\n\n  setBcc(input) {\n    return this.setRecipients(input, {type: 'bcc'})\n  }\n\n  setSubject(value) {\n    this.setHeader('subject', value)\n    return value\n  }\n\n  getSubject() {\n    return this.getHeader('subject')\n  }\n\n  setHeader() {\n    this.headers.set(arguments[0], arguments[1])\n    return arguments[0]\n  }\n\n  getHeader(name) {\n    return this.headers.get(name)\n  }\n\n  setHeaders(obj) {\n    Object.keys(obj).map(prop => this.setHeader(prop, obj[prop]))\n    return this\n  }\n\n  getHeaders() {\n    return this.headers.toObject()\n  }\n\n  setMessage(type, data, moreHeaders={}) {\n    const validTypes = ['text/html', 'text/plain']\n\n    if (validTypes.indexOf(type) === -1) {\n      throw new MIMETextError('INVALID_MESSAGE_TYPE', `\n        Invalid content type for the message. Supported content types \\\n        are ${validTypes.join(', ')} but you specified \"${type}\".\n      `)\n    }\n\n    const headers = Object.assign({}, moreHeaders, {\n      'Content-Type': `${type}; charset=UTF-8`\n    })\n    const msg = new MIMEMessageContent(data)\n\n    msg.setHeaders(headers)\n\n    this.messages.push(msg)\n\n    return msg\n  }\n\n  setAttachment(filename, type, data, moreHeaders={}) {\n    const headers = Object.assign({}, moreHeaders, {\n      'Content-Type': `${type}; charset=UTF-8`,\n      'Content-Transfer-Encoding': 'base64',\n      'Content-Disposition': `attachment;filename=\"${filename}\"`\n    })\n    const msg = new MIMEMessageContent(data)\n\n    msg.setHeaders(headers)\n\n    this.messages.push(msg)\n\n    return this\n  }\n\n  getMessageByType(type) {\n    const matches = this.messages.filter(m => m.getHeader('Content-Type').indexOf(type) !== -1)\n    if (Array.isArray(matches) && matches.length > 0) {\n      return matches[0]\n    }\n    else {\n      return undefined\n    }\n  }\n\n  getAttachments() {\n    return this.messages.filter(m => m.isAttachment() === true) || []\n  }\n\n  asRaw() {\n    let lines = this.headers.dump(this.envctx)\n\n    const plainTextMessage = this.getMessageByType('text/plain')\n    const htmlMessage = this.getMessageByType('text/html')\n    const hasAttachments = this.getAttachments().length > 0\n    const hasPlainTextAlt = plainTextMessage instanceof MIMEMessageContent && htmlMessage instanceof MIMEMessageContent\n\n    if (hasAttachments && hasPlainTextAlt) return this.asRawMixedAlt(lines)\n    else if (hasAttachments) return this.asRawMixed(lines)\n    else if (hasPlainTextAlt) return this.asRawAlt(lines)\n    else return this.asRawMessage(lines)\n  }\n\n  asEncoded() {\n    return this.envctx.toBase64WebSafe( this.asRaw() )\n  }\n\n  asRawMessage(lines) {\n    const plainTextMessage = this.getMessageByType('text/plain')\n    const htmlMessage = this.getMessageByType('text/html')\n    const message = htmlMessage || plainTextMessage\n\n    lines = `${lines}\n${message.dump(this.envctx, this.boundaries)}`\n\n    return lines\n  }\n\n  asRawAlt(lines) {\n    const plainTextMessage = this.getMessageByType('text/plain')\n    const htmlMessage = this.getMessageByType('text/html')\n\n    lines = `${lines}\nContent-Type: multipart/alternative; boundary=${this.boundaries.alt}\n\n--${this.boundaries.alt}\n${plainTextMessage.dump(this.envctx, this.boundaries)}\n\n--${this.boundaries.alt}\n${htmlMessage.dump(this.envctx, this.boundaries)}\n\n--${this.boundaries.alt}--`\n\n    return lines\n  }\n\n  asRawMixed(lines) {\n    const plainTextMessage = this.getMessageByType('text/plain')\n    const htmlMessage = this.getMessageByType('text/html')\n    const message = htmlMessage || plainTextMessage\n    const attachments = this.getAttachments()\n      .map(a => a.dump(this.envctx, this.boundaries))\n      .join('')\n      .replace(/[\\r\\n]$/g, '')\n\n    lines = `${lines}\nContent-Type: multipart/mixed; boundary=${this.boundaries.mixed}\n\n--${this.boundaries.mixed}\n${message.dump(this.envctx, this.boundaries)}\n\n${attachments}\n\n--${this.boundaries.mixed}--`\n\n    return lines\n  }\n\n  asRawMixedAlt(lines) {\n    const plainTextMessage = this.getMessageByType('text/plain')\n    const htmlMessage = this.getMessageByType('text/html')\n    const attachments = this.getAttachments()\n      .map(a => a.dump(this.envctx, this.boundaries))\n      .join('')\n      .replace(/[\\r\\n]$/g, '')\n\n    lines = `${lines}\nContent-Type: multipart/mixed; boundary=${this.boundaries.mixed}\n\n--${this.boundaries.mixed}\nContent-Type: multipart/alternative; boundary=${this.boundaries.alt}\n\n--${this.boundaries.alt}\n${plainTextMessage.dump(this.envctx, this.boundaries)}\n\n--${this.boundaries.alt}\n${htmlMessage.dump(this.envctx, this.boundaries)}\n\n--${this.boundaries.alt}--\n${attachments}\n\n--${this.boundaries.mixed}--`\n\n    return lines\n  }\n\n  toBase64(v) {\n    return this.envctx.toBase64(v)\n  }\n}\n","import MIMEMessage from '../MIMEMessage.js'\n\nconst envctx = {\n  toBase64: function toBase64(data) {\n    return btoa(data)\n  },\n  toBase64WebSafe: function toBase64WebSafe(data) {\n    return btoa(data)\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_')\n      .replace(/=+$/, '')\n  }\n}\n\nclass NodeMIMEMessage extends MIMEMessage {\n  constructor() {\n    super(envctx)\n  }\n}\n\nexport function createMimeMessage() {\n  return new NodeMIMEMessage()\n}\n"],"names":["MIMETextError","_inherits","_createSuper","message","description","_classCallCheck","_trimInstanceProperty","replace","name","_createClass","_wrapNativeSuper","Error","MIMEMessageHeader","placement","maxLineLength","store","value","generator","Date","toGMTString","disabled","dump","v","required","ctx","toBase64","addr","arr","_mapInstanceProperty","join","datestr","now","toString","randomstr","_sliceInstanceProperty","Math","random","domain","_filterInstanceProperty","item","getAddrDomain","toLowerCase","newHeader","custom","push","undefined","_reduceInstanceProperty","memo","envctx","lines","isDefined","MIMEMessageContent","data","maxLineLen","headers","set","arguments","obj","_Object$keys","prop","setHeader","toObject","get","d","_indexOfInstanceProperty","boundaries","headerBlock","isAttachment","mixed","_concatInstanceProperty","Mailbox","input","opts","type","reSpecCompliantAddr","inputType","findInputType","createMailbox","Object","prototype","call","test","text","split","parseSpecCompliantText","result","MIMEMessage","messages","generateBoundaries","alt","mailbox","getHeader","recs","Array","isArray","setRecipients","moreHeaders","validTypes","_Object$assign","msg","setHeaders","filename","matches","m","length","plainTextMessage","getMessageByType","htmlMessage","hasAttachments","getAttachments","hasPlainTextAlt","asRawMixedAlt","asRawMixed","asRawAlt","asRawMessage","toBase64WebSafe","asRaw","attachments","a","btoa","NodeMIMEMessage","createMimeMessage"],"mappings":"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"}