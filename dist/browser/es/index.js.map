{"version":3,"file":"index.js","sources":["../../../src/MIMETextError.js","../../../src/MIMEMessageHeader.js","../../../src/MIMEMessageContent.js","../../../src/Mailbox.js","../../../src/MIMEMessage.js","../../../src/entrypoints/browser.js"],"sourcesContent":["export default class MIMETextError extends Error {\n  constructor(message, description) {\n    super(message)\n    this.description = description ? description.trim().replace(/[\\s]{2,}/, ' ') : null\n    this.name = 'MIMETextError'\n  }\n}\n","import MIMETextError from './MIMETextError.js'\n\n/*\n* Headers are based on: https://www.rfc-editor.org/rfc/rfc4021#section-2.1\n* (Some are ignored as they can be added later or as a custom header.)\n*/\n\nexport default class MIMEMessageHeader {\n  constructor(placement) {\n    this.maxLineLength = 998\n    this.placement = placement\n    this.store = [\n      {\n        placement: 'header',\n        name: 'Date',\n        // value property is what user sets for this header\n        value: null,\n        // the generator function generates a value for this header unless\n        // user specified a value or user disabled this property\n        generator: () => (new Date().toGMTString()).replace(/GMT|UTC/gi, '+0000'),\n        disabled: false,\n        dump: (v) => {\n          return v\n        }\n      },\n      {\n        placement: 'header',\n        name: 'From',\n        required: true,\n        dump: (v, ctx) => !v.name ? v.dump() : `=?utf-8?B?${ctx.toBase64(v.name)}?= <${v.addr}>`\n      },\n      {\n        placement: 'header',\n        name: 'Sender',\n        dump: (v, ctx) => !v.name ? v.dump() : `=?utf-8?B?${ctx.toBase64(v.name)}?= <${v.addr}>`\n      },\n      {\n        placement: 'header',\n        name: 'Reply-To',\n        dump: (v) => {\n          return v\n        }\n      },\n      {\n        placement: 'header',\n        name: 'To',\n        // INFO: \"To\" field is not required according to the RFC-2822\n        //required: true,\n        dump: (arr, ctx) => arr.map(v => !v.name ? v.dump() : `=?utf-8?B?${ctx.toBase64(v.name)}?= <${v.addr}>`).join(\",\\n \")\n      },\n      {\n        placement: 'header',\n        name: 'Cc',\n        dump: (arr, ctx) => arr.map(v => !v.name ? v.dump() : `=?utf-8?B?${ctx.toBase64(v.name)}?= <${v.addr}>`).join(\",\\n \")\n      },\n      {\n        placement: 'header',\n        name: 'Bcc',\n        dump: (arr, ctx) => arr.map(v => !v.name ? v.dump() : `=?utf-8?B?${ctx.toBase64(v.name)}?= <${v.addr}>`).join(\",\\n \")\n      },\n      {\n        placement: 'header',\n        name: 'Message-ID',\n        disabled: false,\n        generator: (ctx) => {\n          const datestr = Date.now().toString()\n          const randomstr = Math.random().toString(36).slice(2)\n          const domain = ctx.store.filter(item => item.name == 'From')[0].value.getAddrDomain()\n          return '<' + randomstr + '-' + datestr + '@' + domain + '>'\n        },\n        dump: (v) => {\n          return v\n        }\n      },\n      {\n        placement: 'header',\n        name: 'Subject',\n        required: true,\n        dump: (v, ctx) => '=?utf-8?B?' + ctx.toBase64(v) + '?='\n      },\n      {\n        placement: 'header',\n        name: 'MIME-Version',\n        generator: () => '1.0',\n        dump: (v) => {\n          return v\n        }\n      },\n      {\n        placement: 'content',\n        name: 'Content-ID',\n        dump: (v) => {\n          return v\n        }\n      },\n      {\n        placement: 'content',\n        name: 'Content-Type',\n        dump: (v) => {\n          return v\n        }\n      },\n      {\n        placement: 'content',\n        name: 'Content-Transfer-Encoding',\n        dump: (v) => {\n          return v\n        }\n      },\n      {\n        placement: 'content',\n        name: 'Content-Disposition',\n        dump: (v) => {\n          return v\n        }\n      }\n    ]\n  }\n\n  set(name, value) {\n    for (const item of this.store) {\n      if (item.name.toLowerCase() == name.toLowerCase()) {\n        item.value = value\n        return item\n      }\n    }\n\n    const newHeader = {\n      custom: true,\n      placement: this.placement,\n      name: name,\n      value: value,\n      dump: (v) => {\n        return v\n      }\n    }\n\n    this.store.push(newHeader)\n\n    return newHeader\n  }\n\n  get(name) {\n    for (const item of this.store) {\n      if (item.name.toLowerCase() == name.toLowerCase()) {\n        return item.value\n      }\n    }\n    return undefined\n  }\n\n  toObject() {\n    return this.store.reduce((memo, item) => {\n      memo[item.name] = item.value\n      return memo\n    }, {})\n  }\n\n  dump(envctx) {\n    const ctx = {\n      toBase64: envctx.toBase64,\n      store: this.store\n    }\n\n    let lines = ''\n    for (const item of this.store) {\n      if (item.placement != this.placement) continue;\n\n      const isDefined = typeof item.value !== 'undefined' && typeof item.value !== 'null'\n\n      const v = isDefined\n        ? item.value\n        : !item.disabled && typeof item.generator == 'function'\n          ? item.generator(ctx)\n          : null\n\n\n      if (!isDefined && item.required) {\n        throw new MIMETextError('MISSING_HEADER', `The \"${item.name}\" header is required.`)\n      }\n\n      if (!isDefined) continue;\n\n      lines += `${item.name}: ${item.dump(v, ctx)}\\r\\n`\n    }\n\n    return lines.slice(0, -2)\n  }\n}\n","import MIMEMessageHeader from './MIMEMessageHeader.js'\n\nexport default class MIMEMessageContent {\n  constructor(data) {\n    this.maxLineLen = 78\n    this.data = data\n    this.headers = new MIMEMessageHeader('content')\n  }\n\n  setHeader() {\n    this.headers.set(arguments[0], arguments[1])\n    return this\n  }\n\n  setHeaders(obj) {\n    Object.keys(obj).map(prop => this.setHeader(prop, obj[prop]))\n    return this\n  }\n\n  getHeaders() {\n    return this.headers.toObject()\n  }\n\n  getHeader(name) {\n    return this.headers.get(name)\n  }\n\n  isAttachment() {\n    const d = this.headers.get('Content-Disposition')\n    return d && d.indexOf('attachment') !== -1 ? true : false;\n  }\n\n  dump(envctx, boundaries) {\n    const headerBlock = this.headers.dump(envctx)\n\n    if (this.isAttachment()) {\n      return `--${boundaries.mixed}\n${headerBlock}\n\n${this.data}\n`\n    }\n    else {\n      return `${headerBlock}\\r\\n\\r\\n${this.data}`\n    }\n  }\n}\n","import MIMETextError from './MIMETextError.js'\n\nexport default class Mailbox {\n  constructor(input, opts={type: 'to'}) {\n    this.reSpecCompliantAddr = /(([^<>\\n\\r]+)\\s)?<[^\\n\\r]+>/\n\n    this.name = null\n    this.addr = null\n    this.type = opts.type || 'to'\n    this.input = input\n    this.inputType = this.findInputType(input)\n\n    this.createMailbox()\n  }\n\n  findInputType(input) {\n    if (Object.prototype.toString.call(input) === '[object Object]') {\n      if (!input.addr) {\n        throw new MIMETextError('INVALID_MAILBOX', `\n          The input should have an \"addr\" property that specifies the email address \\\n          of the recipient.\n        `)\n      }\n      return 'OBJECT'\n    }\n    else if (this.reSpecCompliantAddr.test(input)) {\n      return 'SPEC_COMPLIANT_TEXT'\n    }\n    else if (typeof input == 'string') {\n      return 'TEXT'\n    }\n    else {\n      throw new MIMETextError('INVALID_MAILBOX')\n    }\n  }\n\n  parseSpecCompliantText(text) {\n    text = text.trim()\n\n    if (text.slice(0, 1) == '<' && text.slice(-1) == '>') {\n      return {addr: text.slice(1, -1)}\n    }\n\n    const arr = text.split(' <')\n    arr[0] = /^(\"|')/.test(arr[0]) ? arr[0].slice(1) : arr[0]\n    arr[0] = /(\"|')$/.test(arr[0]) ? arr[0].slice(0, -1) : arr[0]\n    arr[1] = arr[1].slice(0, -1)\n\n    return {name: arr[0], addr: arr[1]}\n  }\n\n  createMailbox() {\n    switch (this.inputType) {\n      case 'OBJECT':\n        this.addr = this.input.addr\n        this.name = this.input.name || null\n        this.type = this.input.type || this.type\n        break;\n\n      case 'SPEC_COMPLIANT_TEXT':\n        const obj = this.parseSpecCompliantText(this.input)\n        this.addr = obj.addr\n        this.name = obj.name || null\n        break;\n\n      case 'TEXT':\n        this.addr = this.input\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  getAddrDomain() {\n    if (!this.addr) {\n      return ''\n    }\n\n    return this.addr.split('@')[1]\n  }\n\n  dump() {\n    let result = `<${this.addr}>`\n\n    if (this.name) {\n      result = `\"${this.name}\" ${result}`\n    }\n\n    return result\n  }\n\n  toObject() {\n    return {\n      name: this.name,\n      addr: this.addr,\n      type: this.type\n    }\n  }\n}\n","import MIMEMessageHeader from './MIMEMessageHeader.js'\nimport MIMEMessageContent from './MIMEMessageContent.js'\nimport MIMETextError from './MIMETextError.js'\nimport Mailbox from './Mailbox.js'\n\nexport default class MIMEMessage {\n  constructor(envctx) {\n    this.envctx = envctx\n    this.headers = new MIMEMessageHeader('header')\n    this.messages = []\n\n    this.generateBoundaries()\n  }\n\n  generateBoundaries() {\n    this.boundaries = {\n      mixed: Math.random().toString(36).slice(2),\n      alt: Math.random().toString(36).slice(2)\n    }\n  }\n\n  setSender(input) {\n    const mailbox = new Mailbox(input, {type: 'from'})\n\n    this.setHeader('From', mailbox)\n\n    return mailbox\n  }\n\n  getSender() {\n    return this.getHeader('From')\n  }\n\n  setRecipients(input, opts={type: 'to'}) {\n    const recs = []\n\n    if (Array.isArray(input)) {\n      input.map(input => recs.push( new Mailbox(input, opts) ))\n    }\n    else {\n      recs.push( new Mailbox(input, opts) )\n    }\n\n    this.setHeader(opts.type, recs)\n\n    return recs\n  }\n\n  getRecipients(opts={type: 'to'}) {\n    return this.getHeader(opts.type) || []\n  }\n\n  setRecipient(input) {\n    return this.setRecipients(input, {type: 'to'})\n  }\n\n  setTo(input) {\n    return this.setRecipients(input, {type: 'to'})\n  }\n\n  setCc(input) {\n    return this.setRecipients(input, {type: 'cc'})\n  }\n\n  setBcc(input) {\n    return this.setRecipients(input, {type: 'bcc'})\n  }\n\n  setSubject(value) {\n    this.setHeader('subject', value)\n    return value\n  }\n\n  getSubject() {\n    return this.getHeader('subject')\n  }\n\n  setHeader() {\n    this.headers.set(arguments[0], arguments[1])\n    return arguments[0]\n  }\n\n  getHeader(name) {\n    return this.headers.get(name)\n  }\n\n  setHeaders(obj) {\n    Object.keys(obj).map(prop => this.setHeader(prop, obj[prop]))\n    return this\n  }\n\n  getHeaders() {\n    return this.headers.toObject()\n  }\n\n  setMessage(type, data, moreHeaders={}) {\n    const validTypes = ['text/html', 'text/plain']\n\n    if (validTypes.indexOf(type) === -1) {\n      throw new MIMETextError('INVALID_MESSAGE_TYPE', `\n        Invalid content type for the message. Supported content types \\\n        are ${validTypes.join(', ')} but you specified \"${type}\".\n      `)\n    }\n\n    const headers = Object.assign({}, moreHeaders, {\n      'Content-Type': `${type}; charset=UTF-8`\n    })\n    const msg = new MIMEMessageContent(data)\n\n    msg.setHeaders(headers)\n\n    this.messages.push(msg)\n\n    return msg\n  }\n\n  setAttachment(filename, type, data, moreHeaders={}) {\n    const headers = Object.assign({}, moreHeaders, {\n      'Content-Type': `${type}; charset=UTF-8`,\n      'Content-Transfer-Encoding': 'base64',\n      'Content-Disposition': `attachment;filename=\"${filename}\"`\n    })\n    const msg = new MIMEMessageContent(data)\n\n    msg.setHeaders(headers)\n\n    this.messages.push(msg)\n\n    return this\n  }\n\n  getMessageByType(type) {\n    const matches = this.messages.filter(m => m.getHeader('Content-Type').indexOf(type) !== -1)\n    if (Array.isArray(matches) && matches.length > 0) {\n      return matches[0]\n    }\n    else {\n      return undefined\n    }\n  }\n\n  getAttachments() {\n    return this.messages.filter(m => m.isAttachment() === true) || []\n  }\n\n  asRaw() {\n    let lines = this.headers.dump(this.envctx)\n\n    const plainTextMessage = this.getMessageByType('text/plain')\n    const htmlMessage = this.getMessageByType('text/html')\n    const hasAttachments = this.getAttachments().length > 0\n    const hasPlainTextAlt = plainTextMessage instanceof MIMEMessageContent && htmlMessage instanceof MIMEMessageContent\n\n    if (hasAttachments && hasPlainTextAlt) return this.asRawMixedAlt(lines)\n    else if (hasAttachments) return this.asRawMixed(lines)\n    else if (hasPlainTextAlt) return this.asRawAlt(lines)\n    else return this.asRawMessage(lines)\n  }\n\n  asEncoded() {\n    return this.envctx.toBase64WebSafe( this.asRaw() )\n  }\n\n  asRawMessage(lines) {\n    const plainTextMessage = this.getMessageByType('text/plain')\n    const htmlMessage = this.getMessageByType('text/html')\n    const message = htmlMessage || plainTextMessage\n\n    lines = `${lines}\n${message.dump(this.envctx, this.boundaries)}`\n\n    return lines\n  }\n\n  asRawAlt(lines) {\n    const plainTextMessage = this.getMessageByType('text/plain')\n    const htmlMessage = this.getMessageByType('text/html')\n\n    lines = `${lines}\nContent-Type: multipart/alternative; boundary=${this.boundaries.alt}\n\n--${this.boundaries.alt}\n${plainTextMessage.dump(this.envctx, this.boundaries)}\n\n--${this.boundaries.alt}\n${htmlMessage.dump(this.envctx, this.boundaries)}\n\n--${this.boundaries.alt}--`\n\n    return lines\n  }\n\n  asRawMixed(lines) {\n    const plainTextMessage = this.getMessageByType('text/plain')\n    const htmlMessage = this.getMessageByType('text/html')\n    const message = htmlMessage || plainTextMessage\n    const attachments = this.getAttachments()\n      .map(a => a.dump(this.envctx, this.boundaries))\n      .join('')\n      .replace(/[\\r\\n]$/g, '')\n\n    lines = `${lines}\nContent-Type: multipart/mixed; boundary=${this.boundaries.mixed}\n\n--${this.boundaries.mixed}\n${message.dump(this.envctx, this.boundaries)}\n\n${attachments}\n\n--${this.boundaries.mixed}--`\n\n    return lines\n  }\n\n  asRawMixedAlt(lines) {\n    const plainTextMessage = this.getMessageByType('text/plain')\n    const htmlMessage = this.getMessageByType('text/html')\n    const attachments = this.getAttachments()\n      .map(a => a.dump(this.envctx, this.boundaries))\n      .join('')\n      .replace(/[\\r\\n]$/g, '')\n\n    lines = `${lines}\nContent-Type: multipart/mixed; boundary=${this.boundaries.mixed}\n\n--${this.boundaries.mixed}\nContent-Type: multipart/alternative; boundary=${this.boundaries.alt}\n\n--${this.boundaries.alt}\n${plainTextMessage.dump(this.envctx, this.boundaries)}\n\n--${this.boundaries.alt}\n${htmlMessage.dump(this.envctx, this.boundaries)}\n\n--${this.boundaries.alt}--\n${attachments}\n\n--${this.boundaries.mixed}--`\n\n    return lines\n  }\n\n  toBase64(v) {\n    return this.envctx.toBase64(v)\n  }\n}\n","import MIMEMessage from '../MIMEMessage.js'\n\nconst envctx = {\n  toBase64: function toBase64(data) {\n    return btoa(data)\n  },\n  toBase64WebSafe: function toBase64WebSafe(data) {\n    return btoa(data)\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_')\n      .replace(/=+$/, '')\n  }\n}\n\nclass NodeMIMEMessage extends MIMEMessage {\n  constructor() {\n    super(envctx)\n  }\n}\n\nexport function createMimeMessage() {\n  return new NodeMIMEMessage()\n}\n"],"names":["MIMETextError","_createSuper","message","description","replace","name","Error","MIMEMessageHeader","placement","maxLineLength","store","value","generator","Date","toGMTString","disabled","dump","v","required","ctx","toBase64","addr","arr","join","datestr","now","toString","randomstr","Math","random","domain","item","getAddrDomain","toLowerCase","newHeader","custom","push","undefined","memo","envctx","lines","isDefined","MIMEMessageContent","data","maxLineLen","headers","set","arguments","obj","prop","setHeader","toObject","get","d","boundaries","headerBlock","isAttachment","mixed","Mailbox","input","opts","type","reSpecCompliantAddr","inputType","findInputType","createMailbox","Object","prototype","call","test","text","split","parseSpecCompliantText","result","MIMEMessage","messages","generateBoundaries","alt","mailbox","getHeader","recs","Array","isArray","setRecipients","moreHeaders","validTypes","msg","setHeaders","filename","matches","m","length","plainTextMessage","getMessageByType","htmlMessage","hasAttachments","getAttachments","hasPlainTextAlt","asRawMixedAlt","asRawMixed","asRawAlt","asRawMessage","toBase64WebSafe","asRaw","attachments","a","btoa","NodeMIMEMessage","createMimeMessage"],"mappings":"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"}